// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MrTomSawyer/url-shortener/internal/app/repository (interfaces: RepoHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepoHandler is a mock of RepoHandler interface.
type MockRepoHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRepoHandlerMockRecorder
}

// MockRepoHandlerMockRecorder is the mock recorder for MockRepoHandler.
type MockRepoHandlerMockRecorder struct {
	mock *MockRepoHandler
}

// NewMockRepoHandler creates a new mock instance.
func NewMockRepoHandler(ctrl *gomock.Controller) *MockRepoHandler {
	mock := &MockRepoHandler{ctrl: ctrl}
	mock.recorder = &MockRepoHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoHandler) EXPECT() *MockRepoHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepoHandler) Create(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepoHandlerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepoHandler)(nil).Create), arg0, arg1)
}

// OriginalURL mocks base method.
func (m *MockRepoHandler) OriginalURL(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OriginalURL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OriginalURL indicates an expected call of OriginalURL.
func (mr *MockRepoHandlerMockRecorder) OriginalURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OriginalURL", reflect.TypeOf((*MockRepoHandler)(nil).OriginalURL), arg0)
}
